name: test
on:
  push:

env:
  TEST_RESULTS: /tmp/test-results # path to where test results are saved
  CONSUL_VERSION: 1.13.1 # Consul's OSS version to use in tests
  CONSUL_ENT_VERSION: 1.13.1+ent # Consul's enterprise version to use in tests
  GOTESTSUM_VERSION: 1.8.1 # You cannot use environment variables with workflows. The gotestsum version is hardcoded in the reusable workflows too.

jobs:
  get-go-version:
    name: "Determine Go toolchain version"
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.get-go-version.outputs.go-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Determine Go version
        id: get-go-version
        # We use .go-version as our source of truth for current Go
        # version, because "goenv" can react to it automatically.
        run: |
          echo "Building with Go $(cat .go-version)"
          echo "::set-output name=go-version::$(cat .go-version)"

  get-product-version:
    runs-on: ubuntu-latest
    outputs:
      product-version: ${{ steps.get-product-version.outputs.product-version }}
    steps:
      - uses: actions/checkout@v2
      - name: get product version
        id: get-product-version
        run: |
          make version
          echo "::set-output name=product-version::$(make version)"

  validate-helm-gen:
    needs:
      - get-go-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}

      - name: Setup go mod cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Validate helm gen 
        working-directory: hack/helm-reference-gen 
        run: |
          go run ./... -validate

  golangci-lint-helm-gen:
   needs:
    - get-go-version
   uses: hashicorp/consul-k8s/.github/workflows/reusable-golangci-lint.yml@main
   with:
      directory: hack/helm-reference-gen
      go-version: ${{ needs.get-go-version.outputs.go-version }}
      #TODO: This is a workaround in order to get pipelines working. godot and staticcheck fail for helm-reference-gen
      args: "--no-config --disable-all --enable gofmt,govet"

  unit-helm-gen:
    needs: [get-go-version, golangci-lint-helm-gen, validate-helm-gen]
    uses: hashicorp/consul-k8s/.github/workflows/reusable-unit.yml@main
    with:
      directory: hack/helm-reference-gen
      go-version: ${{ needs.get-go-version.outputs.go-version }}

  unit-test-helm-templates:
    needs: 
      - unit-helm-gen
    runs-on: ubuntu-latest
    container: 
      image: docker.mirror.hashicorp.services/hashicorpdev/consul-helm-test:0.12.0
      options: --user 1001
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
   
      - name: Run Unit Tests
        working-directory: charts/consul
        run:  bats --jobs 4 ./test/unit

  lint-control-plane:
    needs:
      - get-go-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}

      - run: go install github.com/hashicorp/lint-consul-retry@master && lint-consul-retry

      - name: Run lint
        working-directory: control-plane
        run: go run hack/lint-api-new-client/main.go

  golangci-lint-control-plane:
    needs:
      - get-go-version
    uses: hashicorp/consul-k8s/.github/workflows/reusable-golangci-lint.yml@main
    with:
      directory: control-plane
      go-version: ${{ needs.get-go-version.outputs.go-version }}

  test-control-plane:
    needs: [get-go-version, lint-control-plane, golangci-lint-control-plane]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}

      - name: Setup go mod cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install gotestsum
        run: |
          wget https://github.com/gotestyourself/gotestsum/releases/download/v${{env.GOTESTSUM_VERSION}}/gotestsum_${{env.GOTESTSUM_VERSION}}_linux_amd64.tar.gz
          sudo tar -C /usr/local/bin -xzf gotestsum_${{env.GOTESTSUM_VERSION}}_linux_amd64.tar.gz
          rm gotestsum_${{env.GOTESTSUM_VERSION}}_linux_amd64.tar.gz

      - run:  mkdir -p ${{env.TEST_RESULTS}}
      - run:  echo "$HOME/bin" >> $GITHUB_PATH

      - name: Download consul
        working-directory: control-plane
        run: |
          mkdir -p $HOME/bin
          wget https://releases.hashicorp.com/consul/${{env.CONSUL_VERSION}}/consul_${{env.CONSUL_VERSION}}_linux_amd64.zip && \
            unzip consul_${{env.CONSUL_VERSION}}_linux_amd64.zip -d $HOME/bin && \
            rm consul_${{env.CONSUL_VERSION}}_linux_amd64.zip
          chmod +x $HOME/bin/consul

      - name: Run go tests
        working-directory: control-plane
        run: |
            PACKAGE_NAMES=$(go list ./...)
            GOMAXPROCS=8 gotestsum --junitfile ${{env.TEST_RESULTS}}/gotestsum-report.xml -- -p 4 $PACKAGE_NAMES

  test-enterprise-control-plane:
    if: github.repository_owner == 'hashicorp' # Do not run on forks as this requires secrets
    needs: [get-go-version, lint-control-plane, golangci-lint-control-plane]
    runs-on: ubuntu-latest
    env:
      CONSUL_LICENSE: ${{secrets.CONSUL_LICENSE}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}

      - name: Setup go mod cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install gotestsum
        run: |
          wget https://github.com/gotestyourself/gotestsum/releases/download/v${{env.GOTESTSUM_VERSION}}/gotestsum_${{env.GOTESTSUM_VERSION}}_linux_amd64.tar.gz
          sudo tar -C /usr/local/bin -xzf gotestsum_${{env.GOTESTSUM_VERSION}}_linux_amd64.tar.gz
          rm gotestsum_${{env.GOTESTSUM_VERSION}}_linux_amd64.tar.gz

      - run:  mkdir -p ${{env.TEST_RESULTS}}
      - run:  echo "$HOME/bin" >> $GITHUB_PATH

      - name: Download consul
        working-directory: control-plane
        run: |
          mkdir -p $HOME/bin
          wget https://releases.hashicorp.com/consul/${{env.CONSUL_ENT_VERSION}}/consul_${{env.CONSUL_ENT_VERSION}}_linux_amd64.zip && \
            unzip consul_${{env.CONSUL_ENT_VERSION}}_linux_amd64.zip -d $HOME/bin && \
            rm consul_${{env.CONSUL_ENT_VERSION}}_linux_amd64.zip
          chmod +x $HOME/bin/consul

      - name: Run go tests
        working-directory: control-plane
        run: |
            PACKAGE_NAMES=$(go list ./...)
            GOMAXPROCS=8 gotestsum --junitfile ${{env.TEST_RESULTS}}/gotestsum-report.xml -- -tags=enterprise -p 4 $PACKAGE_NAMES

  build-distros:
    needs: [get-go-version, get-product-version]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # cli
          - {go: "${{ needs.get-go-version.outputs.go-version }}", goos: "linux", goarch: "amd64", component: "cli", pkg_name: "consul-k8s", "bin_name": "consul-k8s" }
          # control-plane
          - {go: "${{ needs.get-go-version.outputs.go-version }}", goos: "linux", goarch: "amd64", component: "control-plane", pkg_name: "consul-k8s-control-plane", "bin_name": "consul-k8s-control-plane" }
          # consul-cni
          - {go: "${{ needs.get-go-version.outputs.go-version }}", goos: "linux", goarch: "amd64", component: "control-plane/cni", pkg_name: "consul-cni", "bin_name": "consul-cni" }

      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} ${{ matrix.component }} build
    steps:
      - uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        working-directory: ${{ matrix.component }}
        run: |
          mkdir -p dist out

          export GIT_COMMIT=$(git rev-parse --short HEAD)
          export GIT_DIRTY=$(test -n "$(git status --porcelain)" && echo "+CHANGES")
          export GIT_IMPORT=github.com/hashicorp/consul-k8s/${{ matrix.component }}/version
          export GOLDFLAGS="-X ${GIT_IMPORT}.GitCommit=${GIT_COMMIT}${GIT_DIRTY} -X ${GIT_IMPORT}.GitDescribe=${{ needs.get-product-version.outputs.product-version }}"

          CGO_ENABLED=0 go build -o dist/${{ matrix.bin_name }} -ldflags "${GOLDFLAGS}" .
          zip -r -j out/${{ matrix.pkg_name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip dist/

      - name: Upload built binaries
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.pkg_name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
          path: ${{ matrix.component}}/out/${{ matrix.pkg_name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip

  golangci-lint-acceptance:
    needs:
      - get-go-version
    uses: hashicorp/consul-k8s/.github/workflows/reusable-golangci-lint.yml@main
    with:
      directory:  acceptance 
      go-version: ${{ needs.get-go-version.outputs.go-version }} 

  unit-acceptance-framework:
    needs: [get-go-version, golangci-lint-acceptance]
    uses: hashicorp/consul-k8s/.github/workflows/reusable-unit.yml@main
    with:
      directory: acceptance/framework
      go-version: ${{ needs.get-go-version.outputs.go-version }}

  golangci-lint-cli:
    needs:
      - get-go-version
    uses: hashicorp/consul-k8s/.github/workflows/reusable-golangci-lint.yml@main
    with:
      directory: cli 
      go-version: ${{ needs.get-go-version.outputs.go-version }}

  unit-cli:
    needs: [get-go-version, golangci-lint-cli]
    uses: hashicorp/consul-k8s/.github/workflows/reusable-unit.yml@main
    with:
      directory: cli 
      go-version: ${{ needs.get-go-version.outputs.go-version }}

 # Disabling for now until we get faster VMs to run acceptance tests. Faster VMs for Github Actions are supposed
 # to be available in the summer of 2022. For now, run the dev-upload docker and acceptance tests in CircleCI
  dev-upload-docker:
    if: github.repository_owner == 'hashicorp' # Do not run on forks as this requires secrets
    needs: [get-product-version, build-distros]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["amd64"]
    env:
      repo: ${{ github.event.repository.name }}
      version: ${{ needs.get-product-version.outputs.product-version }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v3
        with:
          name: consul-cni_${{ needs.get-product-version.outputs.product-version }}_linux_${{ matrix.arch }}.zip
          path: control-plane/dist/cni/linux/${{ matrix.arch }}
      - name: extract consul-cni zip
        env:
          ZIP_LOCATION: control-plane/dist/cni/linux/${{ matrix.arch }}
        run: |
          cd "${ZIP_LOCATION}"
          unzip -j *.zip
      - name: Docker Build (Action)
        uses: hashicorp/actions-docker-build@v1
        with:
          smoke_test: |
            TEST_VERSION="$(docker run "${IMAGE_NAME}" consul-k8s-control-plane version  | awk '{print $2}')"
            if [ "${TEST_VERSION}" != "v${version}" ]; then
              echo "Test FAILED"
              exit 1
            fi
            echo "Test PASSED"
          version: ${{ env.version }}
          target: release-default
          arch: ${{ matrix.arch }}
          pkg_name: consul-k8s-control-plane_${{ env.version }}
          bin_name: consul-k8s-control-plane
          workdir: control-plane
          tags: |
            docker.io/hashicorp/${{ env.repo }}-control-plane:${{ env.version }}
          dev_tags: |
            hashicorppreview/${{ env.repo }}-control-plane:${{ env.version }}
            docker.io/hashicorppreview/${{ env.repo }}-control-plane:${{ env.version }}-${{ github.sha }}

# TODO (agentless): re-enable once tproxy is supported
#  acceptance-tproxy:
#    #needs: [get-go-version, unit-cli, dev-upload-docker, unit-acceptance-framework, unit-test-helm-templates]
#    needs: dev-upload-docker
#    uses: ./.github/workflows/reusable-acceptance.yml
#    with:
#      name: acceptance-tproxy
#      directory: acceptance/tests
#      go-version: ${{ needs.get-go-version.outputs.go-version }}
#      additional-flags: "-use-kind -kubecontext=kind-dc1 -secondary-kubecontext=kind-dc2 -enable-transparent-proxy -consul-image=hashicorppreview/consul-enterprise:1.14-dev"
#      gotestsum-version: 1.6.4
#    secrets:
#      CONSUL_ENT_LICENSE: ${{ secrets.CONSUL_ENT_LICENSE }}

  acceptance:
    needs: dev-upload-docker
    uses: ./.github/workflows/reusable-acceptance.yml
    with:
      name: acceptance
      directory: acceptance/tests
      go-version: ${{ needs.get-go-version.outputs.go-version }}
      additional-flags: "-use-kind -kubecontext=kind-dc1 -secondary-kubecontext=kind-dc2 -consul-image=hashicorppreview/consul-enterprise:1.14-dev"
      gotestsum-version: 1.6.4
    secrets:
      CONSUL_ENT_LICENSE: ${{ secrets.CONSUL_ENT_LICENSE }}

# TODO (agentless): re-enable once tproxy is supported
#  acceptance-cni:
#    needs: dev-upload-docker
#    uses: ./.github/workflows/reusable-acceptance.yml
#    with:
#      name: acceptance
#      directory: acceptance/tests
#      go-version: ${{ needs.get-go-version.outputs.go-version }}
#      additional-flags: "-use-kind -kubecontext=kind-dc1 -secondary-kubecontext=kind-dc2 -enable-transparent-proxy -enable-cni -consul-image=hashicorppreview/consul-enterprise:1.14-dev"
#      gotestsum-version: 1.6.4
#    secrets:
#      CONSUL_ENT_LICENSE: ${{ secrets.CONSUL_ENT_LICENSE }}


